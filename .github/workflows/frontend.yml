name: "Deploy frontend"

# On push, deploy the frontend to main, dev, feature, release, or hotfix
# branches, each branch will have its own deploy. We manually remove the old
# ones since Cloudflare pages does not expose any first order API. On Delete,
# remove all deploys related to the deleted branch.
on:
  push:
    branches: [main, dev, "feature-**", "release-**", "hotfix-**"]
    paths: ["frontend/**", ".github/workflows/frontend.yml"]
  delete:
    branches: [main, dev, "feature-**", "release-**", "hotfix-**"]

# The cloudflare groups ensure that only one workflow per branch can deploy to
# Cloudflare pages at a time
concurrency: cloudflare-${{ github.ref }}

jobs:
  build:
    name: "Build frontend"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: frontend
    permissions:
      # required to use OIDC authentication
      id-token: write
      # required to checkout the code from the repo
      contents: read
      # Required to deploy to Cloudflare Pages
      deployments: write
      actions: read
    steps:
      - uses: actions/checkout@v2

      # Build and test the frontend
      - name: Build React App
        if: github.event_name == 'push'
        run: |
          npm ci
          npm run test
          npm run build

      # Deploy to Cloudflare Pages
      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        if: github.event_name == 'push'
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ vars.CLOUDFLARE_PROJECT_NAME }}
          directory: ./frontend/dist
          # Optional: Enable this if you want to have GitHub Deployments triggered
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      # Cleanup old deployments
      - name: Cleanup old deployments
        run: |

          # Get all deployments
          response=$(curl --silent --request GET \
            --url "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/${{ vars.CLOUDFLARE_PROJECT_NAME }}/deployments" \
            --header "Content-Type: application/json" \
            --header 'Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}')

          # Parse the response to get the latest deployment on the current branch
          latest_deployments=$(echo "$response" | jq '.result[] | select(.deployment_trigger.metadata.branch == "main") | .id ')

          # If the event is a push, we want to keep the last deployment
          is_first_line=${{ github.event_name == 'push' && true || false}}
          while IFS= read -r latest_deployments; do
            if $is_first_line; then
              is_first_line=false
            else
              # Delete the deployment
              delete_response=$(curl --silent --request DELETE \
                --url "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/${{ vars.CLOUDFLARE_PROJECT_NAME }}/deployments/${latest_deployments//\"/}" \
                --header "Content-Type: application/json" \
                --header 'Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}')

              echo "$delete_response"
            fi

          done <<<"$latest_deployments"
