name: "Terraform"

on:
  # Trigger the workflow on push or pull request, for the main, dev and feature
  # branches. Only run the workflow if the terraform directory has changed
  push:
    branches: [main, dev, "feature-**", "release-**", "hotfix-**"]
    paths: ["terraform/**", ".github/workflows/terraform.yml"]
  pull_request:
    branches: [main, dev, "feature-**", "release-**", "hotfix-**"]
    paths: ["terraform/**", ".github/workflows/terraform.yml"]
    # TODO: the "edited" tag will trigger the vent when base branch is changed (which is what we want),
    #      but it will also trigger when the PR is edited (which we don't want).
    #      We leave this edge case open, to avoid having the workflow re-run for each small text changes of the PR.
    types: [opened, synchronize, reopened]
  delete:
    branches: [main, dev, "feature-**", "release-**", "hotfix-**"]

# The aws group ensures that only one workflow at a time can modify the AWS
# infrastructure
concurrency: aws-${{ github.ref }}

jobs:
  # The terraform job is responsible for managing the Terraform lifecycle
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # Set the working directory to the terraform directory
        working-directory: terraform
    permissions:
      # Allow the workflow to write to the pull request
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # The setup-terraform action is responsible for installing Terraform and
      # configuring the Terraform CLI to use the Terraform Cloud API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Set the ENV variable based on the branch name
      - name: Set environment
        id: set_env
        run: |
          REF="${{ github.event_name  == 'pull_request' && github.base_ref || github.ref }}"
          BRANCH=$(basename "$REF")
          WORKSPACE_PREFIX="cars-workspace-branch-"
          WORKSPACE="$WORKSPACE_PREFIX$BRANCH"
          ENV="${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}"
          INPUT='-input=false -var="ENV=$ENV" -var="WORKSPACE_PREFIX=$WORKSPACE_PREFIX" -var="AWS_REGION=${{ secrets.AWS_REGION }}"'

          echo "WORKSPACE=$WORKSPACE" >> "$GITHUB_OUTPUT"
          echo "INPUT=$INPUT" >> "$GITHUB_OUTPUT"

          echo 'TF_WORKSPACE='$WORKSPACE >> $GITHUB_ENV

      # Run the Terraform fmt command to check the Terraform code for formatting
      - name: Terraform Format
        id: fmt
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: terraform fmt -check

      # Run the Terraform init command to initialize the Terraform working directory
      - name: Terraform Init
        id: init
        run: terraform init

      # Select the workspace based on the branch name. If the workspace does
      # not exist, create it
      - name: Terraform create and select workspace
        id: select_and_create
        run: |
          if ! terraform workspace list | grep -q "${{ steps.set_env.outputs.WORKSPACE }}"; then
            terraform workspace new "${{ steps.set_env.outputs.WORKSPACE }}"
          fi
          terraform workspace select "${{ steps.set_env.outputs.WORKSPACE }}"

      # Run the Terraform validate command to validate the Terraform code
      - name: Terraform Validate
        id: validate
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: terraform validate -no-color

      # Run the Terraform plan command to generate a Terraform execution plan
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        # The -var-file option is used to pass the Terraform variables file
        # The -var option is used to pass the ENV variable
        run: terraform plan -no-color ${{ steps.set_env.outputs.INPUT }}
        # Continue the workflow even if the Terraform plan command fails, so that
        # the Terraform plan can be viewed in the pull request.
        # The workflow will be killed later
        continue-on-error: true

      # Create a comment on the pull request with the Terraform plan
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>800.513.328

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # Fail the workflow if the Terraform plan step fails, this allows the pull
      # request message to be written before the workflow is killed
      - name: Terraform Plan Status
        if: |
          (github.event_name == 'pull_request' || github.event_name == 'push') 
          && steps.plan.outcome == 'failure'
        run: exit 1

      # Run the Terraform apply command to apply the Terraform execution plan
      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve ${{ steps.set_env.outputs.INPUT }}

      # Run the Terraform destroy command and delete workspace
      - name: Terraform destroy
        if: github.event_name == 'delete'
        run: |
          terraform apply -destroy -auto-approve ${{ steps.set_env.outputs.INPUT }}
          terraform workspace delete ${{ steps.set_env.outputs.WORKSPACE }}
